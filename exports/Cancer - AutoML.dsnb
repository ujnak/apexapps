[
  {
    "name" : "Cancer - AutoML",
    "description" : null,
    "tags" : null,
    "version" : "7",
    "layout" : "zeppelin",
    "type" : "low",
    "snapshot" : false,
    "isEditable" : true,
    "isRunnable" : true,
    "template" : "dsrgmn3y",
    "templateConfig" : "{\"visualization\":{\"filters\":[{\"_id\":1583324064459,\"type\":\"styling\",\"enabled\":true,\"conditions\":{\"operator\":\"and\",\"conditions\":[{\"property\":\"hiddenConnection\",\"operator\":\"*\",\"value\":\"\"}]},\"component\":\"edge\",\"target\":\"edge\",\"properties\":{\"colors\":[\"rgba(0, 0, 0, 0.1)\"],\"style\":[\"dashed\"],\"legendTitle\":[\"Hidden Connection\"]}},{\"_id\":1590499315755,\"type\":\"aggregation\",\"enabled\":true,\"conditions\":{\"operator\":\"and\",\"conditions\":[]},\"component\":\"vertex\",\"target\":\"vertex\",\"properties\":{},\"aggregation\":[{\"source\":\"\",\"type\":\"average\"}]}],\"version\":4}}",
    "paragraphs" : [
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "import oml",
          "from oml import automl",
          "import pandas as pd",
          "import numpy as np",
          "",
          "df = oml.sync(table='BREAST_CANCER')"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "# Split dataset into train and test",
          "train, test = df.split(ratio=(0.8, 0.2), seed = 1234, hash_cols=['CASE_ID'])",
          "X, y = train.drop('TARGET'), train['TARGET']",
          "X_test, y_test = test.drop('TARGET'), test['TARGET']"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "# Create an automated machine learning pipeline object with f1_macro score_metric",
          "pipeline = automl.Pipeline(mining_function='classification', score_metric='f1_macro', parallel=2)",
          "# Fit the pipeline to perform automated algorithm selection, feature selection, and model tuning on the dataset",
          "pipeline = pipeline.fit(X, y, case_id='CASE_ID')"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "# Use the pipeline for prediction",
          "predictions = pipeline.predict(X_test, supplemental_cols=y_test)",
          "print(f\"{predictions}\")",
          "# For classification tasks, the pipeline can also predict class probabilities",
          "probabilities = pipeline.predict_proba(X_test, supplemental_cols=y_test)",
          "print(f\"{probabilities}\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%sql",
          "drop table if exists SERMODEL"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "# Inspect the best tuned and fitted model produced by the AutoML pipeline",
          "best_model = pipeline.top_k_tuned_models[0]['fitted_model']",
          "print(f\"{best_model}\")",
          "export = best_model.export_sermodel('SERMODEL')"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      }
    ]
  }
]