アプリケーションにデータをロードする機能を組み込むものですが、以前もデータをロードするページを作り込む機能はありました。
https://apex.oracle.com/pls/apex/japancommunity/r/main/workshops?series=DL1

今回は新しく追加された機能を使って、作り直してみます。

前回はそれぞれの都道府県が公開しているCOVID19の陽性患者情報をロードするアプリケーションを作っています。

すでに表COVID19_PATIENTS表が作成されているとします。

オブジェクト・ブラウザよりCOVID19_PATIENTSを選んで、アプリケーションを作成します。

ユーザーインターフェースのデフォルト値を変更します。

JSONの表示を選んで、一気に変更します。

-----
{
"applicationDefaults": {
"name": "Application Defaults",
"tablePrefixes": "",
"description": "",
"tables": [
{
"table": "COVID19_PATIENTS",
"labelSingular": "陽性患者属性",
"labelPlural": "陽性患者一覧",
"primaryDisplayColumn": "%",
"secondaryDisplayColumn": "%",
"primaryKeyColumn": "%",
"primaryParentTable": "%",
"description": ""
}
],
"tableColumns": [
{
"table": "COVID19_PATIENTS",
"column": "CITY_NAME",
"label": "市区町村名",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "MUNICIPALITY_CODE",
"label": "全国地方公共団体コード",
"formControl": "numberField",
"includeOnForms": true,
"includeOnReports": true,
"formatMask": "999G999G999G999G999G999G999G999G999G990",
"required": false,
"help": "NUMBER"
}
,
{
"table": "COVID19_PATIENTS",
"column": "NO",
"label": "No",
"formControl": "numberField",
"includeOnForms": true,
"includeOnReports": true,
"formatMask": "999G999G999G999G999G999G999G999G999G990",
"required": false,
"help": "NUMBER"
}
,
{
"table": "COVID19_PATIENTS",
"column": "ONSET_DATE",
"label": "発症_年月日",
"formControl": "datePicker",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "DATE"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_AGE",
"label": "患者_年代",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_LEFT_HOSPITAL",
"label": "患者_退院済フラグ",
"formControl": "numberField",
"includeOnForms": true,
"includeOnReports": true,
"formatMask": "999G999G999G999G999G999G999G999G999G990",
"required": false,
"help": "NUMBER"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_LOCATION",
"label": "患者_居住地",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_OCCUPATION",
"label": "患者_職業",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_SEX",
"label": "患者_性別",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_STATUS",
"label": "患者_状態",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_SYMPTOM",
"label": "患者_症状",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PATIENT_TRAVEL_HISTORY",
"label": "患者_渡航歴の有無フラグ",
"formControl": "numberField",
"includeOnForms": true,
"includeOnReports": true,
"formatMask": "999G999G999G999G999G999G999G999G999G990",
"required": false,
"help": "NUMBER"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PREFECTURE_NAME",
"label": "都道府県名",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": true,
"help": "VARCHAR2"
}
,
{
"table": "COVID19_PATIENTS",
"column": "PUBLISHED_DATE",
"label": "公表_年月日",
"formControl": "datePicker",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "DATE"
}
,
{
"table": "COVID19_PATIENTS",
"column": "REMARK",
"label": "備考",
"formControl": "text",
"includeOnForms": true,
"includeOnReports": true,
"required": false,
"help": "VARCHAR2"
}
],
"components": {
"reports": {
"rowsPerPage": "50",
"paginationMethod": "nextPrevious",
"numericFormatMask": "99G999G999G999G999G999G999G999G999G999G990",
"dateFormatMask": "SINCE"
}
}
}
}
----

属性デフォルトの適用を行います。

アプリケーション作成ウィザードにもどって、アプリケーションの作成を実行します。

最初に東京都のデータをロードする画面を作成します。

共有コンポーネントから、データ・ロード定義を実行します。
名前に、東京都、表には、COVID19_PATIENTS、を選択します。

サンプルのファイルとしては、
130001_tokyo_covid19_patients_sample.csv
を選択します。
一年前に比べて、データが大変増えたのでロードに時間がかかるようになっています。なので、内容を削除しています。

次に進みます。
マップ先を選んで、ページの作成および追加を実行します。

名前に、東京都、を指定します。

ナビゲーション・エントリを作成します。

データ・ロードが東京都、ファイル、最大５MBのデフォルトで、作成をクリックします。

作成したページを実行します。

実際のファイルのロードを行います。

プレビューを確認します。

データのロードを実行します。1287行がロードされます。

レポートを表示して、データがロードされていることを確認します。

東京の定義を開いて静的IDをTOKYOとします。

続いて、山口県のデータをロードします。
最初の作業手順は同じです。
山口県のデータ・ロード定義とデータ・ロードのページを作成します。

使用するファイルは
350001_yamaguchi_covid19_patients_sample.csv
ファイル・エンコーディングとして、日本語(Shift JIS)を選択します。

マップ先を定義します。
NoとMUNICIPALITY_CODEを主キーとします。
ページの作成および追加をクリックします。

ページ名は山口県として、作成する。
ページが作成されたら、実行する。

ファイルを選択し、データのロード、を実行する。

レポートを開いて、山口県のデータがロードされていることを確認する。

ここで、データ・ロード定義の設定で、

都道府県名、から、全国地方自治体コード、をルックアップしてロードする。

患者_年代、から、歳の字を取り除く処理を加えてみます。

データ・ロード定義を開きます。

静的IDは、YAMAGUCHI、と変更しておきます。

データ・プロファイルの編集をおこないます。

MUNICIPALITY_CODEの鉛筆アイコンをクリックして、削除します。

列の追加をクリックします。

先程、存在していたMUNICIPALITY_CODEの置き換えになるので、順序を、２、としてます。名前は、MUNICIPALITY_CODE、主キーはONです。

列タイプとして、ルックアップ、を選択します。

データ型は数値です。

表は、あらかじめCOVID19_MUNICIPALITIESとして、全国地方自治体コードが列CODE、と、都道府県名がNAME、が登録されています。

表名として、COVID19_MUNICIPALITIES、を選びます。

戻り列は、CODE、です。

表の列１として、NAME、データ列１は、PREFECTURE_NAME、になります。

これで、データに含まれるPREFECTURE_NAMEに一致するNAMEを、COVID19_MUNICIPALITIES、表から探して、一致するNAMEの、CODEをデータとして取り込むことになります。

作成をクリックします。

次に、PATIENT_AGEから、歳の字を取り除きます。

鉛筆アイコンをクリックします。

トランスフォーメーションのルール・タイプより、正規表現置換、を選択します。

式１に
(\d+)歳代
を設定し、式２に
\1代
を指定します。

変更の適用、を行います。

ロード・メソッドはマージなので、同じデータをもう一度ロードすると、後の情報に置き換わります。

ページを実行して、再度、データをロードします。
データをロードした結果を、レポートから確認します。
全国地方自治体コードは変わらず入力されていますし、歳の字は除かれています。
ただし、10歳未満、は正規表現に一致しなかったため、そのままになっています。
次に福岡県のデータをロードしてみます。福岡県のデータはほとんど東京都と形式が同じですが、ヘッダーが異なります。
データ・ロード定義を編集して、ヘッダーの違いを吸収します。
東京都のデータ・ロード定義を開きます。
データ・プロファイルの編集を開きます。
PATIENT_LOCATIONの編集を行います。
セレクタ・タイプを正規表現に変更し、セレクタを、患者_居住地、または、居住地、に変更します。
患者_居住地|居住地
変更の適用をクリックします。
同様に、PATIENT_AGEを変更します。
患者_年代|年代
PATIENT_SEXも変更します。
患者_性別|性別
海外渡航歴も変更します。
患者_渡航歴の有無フラグ|海外渡航歴有
変更されていることを確認して、変更の適用をクリックします。
東京都のデータ・ロードを使って、福岡県のデータをロードします。
東京都のデータ・ロードを開きます。
プレビューで確認できますが、ヘッダーが居住地、年代、性別です。
データのロードを実行します。
NULLはロードできない、というエラーがでました。データ・ロードの定義を変更してみます。
東京都を開き、
エラー処理のエラー時を、エラーをコレクションに記録、へ変更します。
エラー・コレクション名に、LOAD_ERROR、を指定します。
保存して、再度、ロード処理を実行します。
正常終了しますが、１エラーで処理された、とレポートされます。
指定したコレクションの内容を確認してみます。
開発者ツールバーより、セッションを実行します。
ビューに、コレクションを選び、設定、をクリックします。
N001が256、256行目に、PREFECTURE_NAMEが空のデータがあって、ロードに失敗したとのことです。
実際に確認してみると、この行は、県名だけでなく、全部空白でした。そのため、無視しても問題ありません。
新しいデータ・ロードは、新規のプロセス・タイプ、データのロードで実行されます。
21.1では新規にパッケージ、APEX_DATA_LOADINGも提供されています。
このデータのロードを行う処理は、APEX_DATA_LOADINGをつかって記述すると次のようになります。
----
declare
l_file blob;
l_res apex_data_loading.t_data_load_result;
begin
select blob_content into l_file
from apex_application_temp_files where name = :P9_FILE;
l_res := apex_data_loading.load_data
(
p_static_id => 'YAMAGUCHI',
p_data_to_load => l_file
);
:P9_ERROR_ROW_COUNT := l_res.error_rows;
end;
----
データのロードの条件を、なし、に設定して、実行されない様にします。
新規にプロセスを作成し、名前を、コードによるデータのロード、とします。
タイプを、コードを実行、とします。
PL/SQLコードに上記を設定し、
ボタンLOADが押された時に実行されるようにします。
保存して、データのロードを行ってみます。
SQLコマンドから、今までロードしたデータを削除します。
delete from covid19_patients;
山口県のロードを行うページを開き、ファイルを選択し、データのロード、を実行します。
成功時に表示されるメッセージを登録していないので、特に何も表示されません。
結果をレポートから確認します。
APIを使ったロードでも、設定はデータ・ロード定義を参照するため、データのロードはAPIから呼び出した場合でも全く同様に行われます。
一般には、大量データのロードをバックグラウンドで実行する時に、APIを使ったデータのロードを行うことになるかと思います。
以上で、新しいデータのロードについての紹介は終了です。
